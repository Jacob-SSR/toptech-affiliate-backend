datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ======================
// ENUMS
// ======================
enum AffiliateStatus {
  PENDING
  APPROVED
  REJECTED
}

enum LeadStatus {
  NEW
  APPROVED
  REJECTED
}

enum CommissionStatus {
  PENDING
  PAID
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum CommissionRuleType {
  FLAT
  PERCENTAGE
  STAGED
}

// ======================
// MODELS
// ======================

model Affiliate {
  id             Int             @id @default(autoincrement())
  code           String          @unique
  firstName      String
  lastName       String
  email          String          @unique
  password       String
  link           String?
  emailConfirmed Boolean         @default(false)
  status         AffiliateStatus @default(PENDING)
  paymentDetails Json?
  referredBy     String?
  referredByUser Affiliate?      @relation("AffiliateReferrals", fields: [referredBy], references: [code])
  referrals      Affiliate[]     @relation("AffiliateReferrals")
  lastLinkUpdate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  referralClicks ReferralClick[]
  leads          Lead[]
  commissions    Commission[]
  payments       Payment[]
}

model ReferralClick {
  id           Int       @id @default(autoincrement())
  affiliate    Affiliate @relation(fields: [affiliateId], references: [id])
  affiliateId  Int
  campaignCode String
  ipAddress    String
  userAgent    String
  clickedAt    DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Lead {
  id             Int        @id @default(autoincrement())
  affiliate      Affiliate  @relation(fields: [affiliateId], references: [id])
  affiliateId    Int
  name           String
  email          String
  phone          String
  status         LeadStatus @default(NEW)
  sourceCampaign String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  orders Order[]

  @@unique([affiliateId, email])
}

model Order {
  id           Int      @id @default(autoincrement())
  lead         Lead     @relation(fields: [leadId], references: [id])
  leadId       Int
  totalAmount  Decimal  @db.Decimal(10, 2)
  downPayment  Decimal  @db.Decimal(10, 2)
  installments Int
  status       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  commissions Commission[]
}

model Commission {
  id          Int              @id @default(autoincrement())
  order       Order            @relation(fields: [orderId], references: [id])
  orderId     Int
  affiliate   Affiliate        @relation(fields: [affiliateId], references: [id])
  affiliateId Int
  rule        CommissionRule   @relation(fields: [ruleId], references: [id])
  ruleId      Int
  payment     Payment?         @relation(fields: [paymentId], references: [id])
  paymentId   Int?
  amount      Decimal          @db.Decimal(10, 2)
  status      CommissionStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  statusHistory CommissionStatusHistory[]
}

model CommissionStatusHistory {
  id           Int              @id @default(autoincrement())
  commission   Commission       @relation(fields: [commissionId], references: [id])
  commissionId Int
  oldStatus    CommissionStatus
  newStatus    CommissionStatus
  changedAt    DateTime         @default(now())
  changedBy    String
}

model Payment {
  id          Int           @id @default(autoincrement())
  affiliate   Affiliate     @relation(fields: [affiliateId], references: [id])
  affiliateId Int
  totalAmount Decimal       @db.Decimal(10, 2)
  paidAt      DateTime?
  referenceNo String
  status      PaymentStatus
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  commissions Commission[]
}

model CommissionRule {
  id         Int                @id @default(autoincrement())
  type       CommissionRuleType
  parameters Json?
  active     Boolean            @default(true)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  commissions Commission[]
}
